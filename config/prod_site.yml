---
- name: create an autoscaling group based on a launch configuration
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: validate input
    fail: msg="The variables 'stack_name', 'lc_version', 'callback_url', and 'callback_key'  must be specified as extra vars"
    when: stack_name is not defined or lc_version is not defined or callback_url is not defined or callback_key is not defined
  - name: ensure elb exists
    ec2_elb_lb:
      name: "{{ stack_name }}-elb"
      region: "{{ region }}"
      state: present
      zones: "{{ azs }}"   
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 8000
      health_check:
        ping_protocol: http
        ping_port: 8000
        ping_path: "/"
        response_timeout: 5 # seconds
        interval: 30 # seconds
        unhealthy_threshold: 2
        healthy_threshold: 5
    register: elb_data
  - name: lookup ami id
    ec2_ami_search: distro=ubuntu region={{ region }} release=trusty
    register: ubuntu_image
  # Note that launch configs cannot be updated -- only created or deleted
  - name: ensure launch config exists
    ec2_lc:
      name: "{{ stack_name }}-lc-{{ lc_version }}"
      region: "{{ region }}"
      image_id: "{{ ubuntu_image.ami }}"
      key_name: "{{ keypair }}"
      security_groups: "{{ security_group }}"
      instance_type: "{{ instance_type }}"
      user_data: |
        #!/bin/bash
        retry_attempts=10
        attempt=0
        while [[ $attempt -lt $retry_attempts ]]
        do
          status_code=`curl -s -i --data "host_config_key={{ callback_key }}" \
            {{ callback_url }} | head -n 1 | awk '{print $2}'`
          if [[ $status_code == 202 ]]
            then
            exit 0
          fi
          attempt=$(( attempt + 1 ))
          echo "${status_code} received... retrying in 1 minute. (Attempt ${attempt})"
          sleep 60
        done
        exit 1
  - name: ensure asg exists
    ec2_asg:
      name: "{{ stack_name }}-asg"
      launch_config_name: "{{ stack_name }}-lc-{{ lc_version }}"
      load_balancers: "{{ stack_name}}-elb"
      min_size: 1
      max_size: 1
      region: "{{ region }}"
      availability_zones: "{{ azs }}"
      state: present

- name: deploy the app to instances
  hosts: tag_aws_autoscaling_groupName_{{ stack_name }}-asg
  remote_user: ubuntu
  gather_facts: yes
  sudo: yes
  roles:
    - hello
